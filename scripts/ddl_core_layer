/*
===============================================================================
DDL Script: Create CORE Views
===============================================================================
Script Purpose:
    This script creates views for the CORE layer in the data warehouse. 
    The Core layer represents the final dimension and fact tables (Star Schema)

    Each view performs transformations and combines data from the Staging layer 
    to produce a clean, enriched, and business-ready dataset.

Usage:
    - These views can be queried directly for analytics and reporting.
===============================================================================
*/

-- =============================================================================
-- Create Dimension: core.dim_customers
-- =============================================================================
-- Foreign Key Integrity (Dimension)
SELECT * 
FROM core.fact_sales f
LEFT JOIN core.dim_customers c
ON c.customer_key = f.customer_key
LEFT JOIN core.dim_products p
ON p.product_key = f.product_key
WHERE p.product_key IS NULL

SELECT * 
FROM core.fact_sales f
LEFT JOIN core.dim_customers c
ON c.customer_key = f.customer_key
WHERE c.customer_key IS NULL

SELECT * FROM core.fact_sales 
CREATE VIEW core.fact_sales AS
SELECT
sd.sls_ord_num AS order_number,
pr.product_key,
cu.customer_key,
sd.sls_order_dt AS order_date,
sd.sls_ship_id AS shipping_date,
sd.sls_due_dt AS due_date,
sd.sls_sales AS sales_amount,
sd. sls_quantity AS quantity,
sd.sls_price AS price
FROM Staging_Layer.crm_sales_details sd
LEFT JOIN core.dim_products pr
ON sd.sls_prd_key = pr.product_number
LEFT JOIN core.dim_customers cu
ON sd.sls_cust_id = cu.customer_id

SELECT * FROM core.dim_products

CREATE VIEW core.dim_products AS
SELECT
	ROW_NUMBER() OVER (ORDER BY pn.prd_start_dt, pn.prd_key) AS product_key,
	pn.prd_id AS product_id,
	pn.prd_key AS product_number,
	pn.prd_nm AS product_name,
	pn.cat_id AS category_id,
	pc.cat AS category,
	pc.subcat AS subcategory,
	pc.maintenance,
	pn.prd_cost AS cost,
	pn.prd_line AS product_line,
	pn.prd_start_dt AS start_date
FROM Staging_Layer.crm_prd_info pn
LEFT JOIN Staging_Layer.erp_px_cat_g1v2 pc
ON pn.cat_id =pc.id
WHERE prd_end_dt IS NULL -- FILTHER OUT ALL HISTORICAL DATA


SELECT * FROM core.dim_customers

CREATE VIEW core.dim_customers AS
SELECT
    ROW_NUMBER() OVER (ORDER BY ci.cst_id) AS customer_key,
    ci.cst_id AS customer_id,
    ci.cst_key AS customer_number,
    ci.cst_firstname AS first_name,
    ci.cst_lastdname AS last_name,
    la.cntry AS country,
    ci.cst_material_status AS marital_status,
    CASE 
        WHEN ci.cst_gndr != 'n/a' THEN ci.cst_gndr
        ELSE COALESCE(ca.gen, 'n/a')
    END AS gender,
    ca.bdate AS birthdate,
    ci.cst_create_date AS create_date
FROM Staging_Layer.crm_cust_info ci
LEFT JOIN Staging_Layer.erp_cust_az12 ca
    ON ci.cst_key = ca.cid
LEFT JOIN Staging_Layer.erp_loc_a101 la
    ON ci.cst_key = la.cid

    
SELECT DISTINCT 
	ci.cst_gndr,
	ca.gen,
	CASE WHEN ci.cst_gndr != 'n/a'  THEN ci.cst_gndr 
		ELSE  COALESCE(ca.gen,'n/a')
	END AS new_gen
FROM Staging_Layer.crm_cust_info ci
LEFT JOIN Staging_Layer.erp_cust_az12 ca
ON		  ci.cst_key = ca.cid
LEFT JOIN Staging_Layer.erp_loc_a101 la
ON		  ci.cst_key = la.cid
ORDER BY 1,2

SELECT
	cst_id,
	cst_key,
	cst_firstname,
	cst_lastdname,
	cst_material_status,
	CASE WHEN ci.cst_gndr != 'n/a'  THEN ci.cst_gndr 
		ELSE  COALESCE(ca.gen,'n/a')
	END AS new_gen,
	cst_create_date,
	ca.bdate,
	la.cntry
FROM Staging_Layer.crm_cust_info ci
LEFT JOIN Staging_Layer.erp_cust_az12 ca
ON		ci.cst_key = ca.cid
LEFT JOIN Staging_Layer.erp_loc_a101 la
ON		  ci.cst_key = la.cid
SELECT cst_id, COUNT(*) FROM
(SELECT
	cst_id,
	cst_key,
	cst_firstname,
	cst_lastdname,
	cst_material_status,
	cst_gndr,
	cst_create_date,
	ca.bdate,
	ca.gen,
	la.cntry
FROM Staging_Layer.crm_cust_info ci
LEFT JOIN Staging_Layer.erp_cust_az12 ca
ON		ci.cst_key = ca.cid
LEFT JOIN Staging_Layer.erp_loc_a101 la
ON		  ci.cst_key = la.cid
)t GROUP BY cst_id
HAVING COUNT(*)>1
