/*
===============================================================================
DDL AND DML in Staging_Layer
===============================================================================
Script Purpose:
    Perform data quality checks, standardization, and loading from Raw_Layer to Staging_Layer.

Actions Performed:
    - Data validation (nulls, invalid dates, unwanted spaces)
    - Data standardization (trimming, value replacement, value mapping)
    - Insert cleansed and transformed data into Staging Layer tables

Parameters:
    None

Usage:
    Apologies for any inconvenience â€” this SQL script may take some time to understand.
    You might want to start executing from the line below the bulk insert statements,
    then continue running from the bottom upward to the first line. 
    I apologize for the slightly messy arrangement of DDL and DML statements.
===============================================================================
*/

 -- Check data Quality
SELECT*FROM Staging_Layer.erp_px_cat_g1v2
INSERT INTO Staging_Layer.erp_px_cat_g1v2
(id, cat, subcat, maintenance)
SELECT 
id,
cat,
subcat,
maintenance
FROM Raw_Layer.erp_px_cat_g1v2
--Check for unwanted Spaces
SELECT * FROM Raw_Layer. erp_px_cat_g1v2
WHERE cat != TRIM(cat) OR subcat != TRIM(subcat) OR maintenance != TRIM(maintenance)
-- Data Standardization & Consistency
SELECT DISTINCT
maintenance
FROM Raw_Layer.erp_px_cat_g1v2

SELECT
REPLACE(cid, '-', '') AS cid,
CASE
WHEN TRIM(cntry) = 'DE' THEN 'Germany'
WHEN TRIM(cntry) IN ('US', 'USA' ) THEN 'United States'
WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'n/a'
ELSE TRIM(cntry)
END AS cntry -- Normalize and Handle missing or blank country codes
FROM Raw_Layer.erp_loc_a101

-- Data Standardization & Consistency
SELECT DISTINCT cntry
FROM Staging_Layer.erp_loc_a101
ORDER BY cntry

SELECT * FROM Staging_Layer.erp_loc_a101

INSERT INTO Staging_Layer.erp_cust_az12 (cid, bdate, gen)
SELECT
    CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))
         ELSE cid
    END AS cid,
    CASE WHEN bdate > GETDATE() THEN NULL
         ELSE bdate
    END AS bdate,
    CASE 
        WHEN UPPER(LTRIM(RTRIM(gen))) IN ('F', 'FEMALE') THEN 'Female'
        WHEN UPPER(LTRIM(RTRIM(gen))) IN ('M', 'MALE') THEN 'Male'
        ELSE 'n/a'
    END AS gen
FROM Raw_Layer.erp_cust_az12;



-- Check for Invalid Date Orders
SELECT
*
FROM Staging_Layer.crm_sales_details
WHERE sls_order_dt > sls_ship_id OR sls_order_dt > sls_due_dt; 

INSERT INTO Staging_Layer.crm_sales_details (
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    sls_order_dt,
    sls_ship_id,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
)
SELECT
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    CASE WHEN sls_order_dt = 0 OR LEN(CAST(sls_order_dt AS VARCHAR)) != 8 THEN NULL
         ELSE sls_order_dt
    END AS sls_order_dt,
    CASE WHEN sls_ship_id = 0 OR LEN(CAST(sls_ship_id AS VARCHAR)) != 8 THEN NULL
         ELSE sls_ship_id
    END AS sls_ship_id,
    CASE WHEN sls_due_dt = 0 OR LEN(CAST(sls_due_dt AS VARCHAR)) != 8 THEN NULL
         ELSE sls_due_dt
    END AS sls_due_dt,
    CASE WHEN sls_sales IS NULL OR sls_sales <= 0 
              OR sls_sales != sls_quantity * ABS(sls_price)
         THEN sls_quantity * ABS(sls_price)
         ELSE sls_sales
    END AS sls_sales,
    sls_quantity,
    CASE WHEN sls_price IS NULL OR sls_price <= 0
         THEN sls_sales / NULLIF(sls_quantity, 0)
         ELSE sls_price
    END AS sls_price
FROM Raw_layer.crm_sales_details;


-- Check Data Consistency: Between Sales, Quantity, and Price
-- >> Sales = Quantity * Price
-- >> Values must not be NULL, zero, or negative.
FROM Raw_Layer.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price
OR sls_sales IS NULL OR sls_quantity IS NULL OR sls_price IS NULL
OR sls_sales <= 0 OR sls_quantity <= 0 OR sls_price <= 0
ORDER BY sls_sales, sls_quantity,sls_price
-- Check for Invalid Date Orders
SELECT
*
FROM Raw_Layer.crm_sales_details
WHERE sls_order_dt > sls_ship_id OR sls_order_dt > sls_due_dt; 

-- Check for Invalid Dates
SELECT
NULLIF(sls_order_dt,0) sls_order_dt
FROM Raw_Layer.crm_sales_details
WHERE sls_order_dt<= 0
OR LEN(sls_order_dt) != 8
OR sls_order_dt > 20500101
OR sls_order_dt< 19000101;

SELECT
sls_ord_num,
sls_prd_key,
sls_cust_id,
sls_order_dt,
sls_ship_id,
sls_due_dt,
sls_sales,
sls_quantity,
sls_price
FROM Raw_Layer.crm_sales_details
WHERE sls_cust_id NOT IN (SELECT cst_id FROM Staging_Layer.crm_cust_info)

INSERT INTO Staging_Layer.crm_prd_info (
	prd_id,
	cat_id,
	prd_key,
	prd_nm,
	prd_cost,
	prd_line,
	prd_start_dt,
	prd_end_dt
)
SELECT
prd_id,
REPLACE(SUBSTRING(prd_key,1,5), '-', '_') AS cat_id,
SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,
prd_nm,
ISNULL(prd_cost, 0) AS prd_cost,
CASE WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
	 WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
	 WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'other Sales'
	 WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
	 ELSE 'n/a'
	END as prd_line,
CAST (prd_start_dt AS DATE) AS prd_start_dt,
CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS DATE) AS prd_end_dt
FROM Raw_Layer.crm_prd_info
WHERE REPLACE(SUBSTRING(prd_key,1,5), '-', '_') NOT IN
	(SELECT DISTINCT id FROM Raw_Layer.erp_px_cat_g1v2);

IF OBJECT_ID ('Staging_Layer.crm_prd_info', 'U') IS NOT NULL
DROP TABLE Staging_Layer.crm_prd_info;
CREATE TABLE Staging_Layer.crm_prd_info (
	prd_id	INT,
	cat_id	NVARCHAR(50),
	prd_key	NVARCHAR(50),
	prd_nm	NVARCHAR(50),
	prd_cost	INT,
	prd_line	NVARCHAR(50),
	prd_start_dt DATE,
	prd_end_dt	DATE,
	dwh_create_date DATETIME2 DEFAULT GETDATE()
);

SELECT
prd_id,
prd_key,
prd_nm,
prd_start_dt,
prd_end_dt,
LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS prd_end_dt
FROM Raw_Layer.crm_prd_info;

SELECT
	prd_id,
	prd_key,
	REPLACE(SUBSTRING(prd_key,1,5), '-', '_') AS cat_id,
	SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,
	prd_nm,
	ISNULL(prd_cost, 0) AS prd_cost,
	prd_line,
	CASE WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
		 WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
		 WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'other Sales'
		 WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
		 ELSE 'n/a'
	END as prd_line,
CAST (prd_start_dt AS DATE) AS prd_start_dt,
CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS DATE) AS prd_end_dt
FROM Raw_Layer.crm_prd_info
WHERE REPLACE(SUBSTRING(prd_key,1,5), '-', '_') NOT IN
	(SELECT DISTINCT id FROM Raw_Layer.erp_px_cat_g1v2);

-- CHECK for Invalid Date Orders
SELECT *
FROM Raw_Layer.crm_prd_info
WHERE prd_end_dt < prd_start_dt -- price overlapping 

-- CHECK FOR NULL or Duplicates in Primary Key
-- Expectation: No Result
SELECT
prd_id,
COUNT (*)
FROM Raw_Layer.crm_prd_info
GROUP BY prd_id
HAVING COUNT(*) > 1 OR prd_id IS NULL;

-- Check for NULLS or Negative Numbers
-- Expectation: No Results
SELECT prd_nm
FROM Staging_Layer.crm_prd_info
WHERE prd_nm != TRIM(prd_nm);

SELECT prd_cost
FROM Raw_Layer.crm_prd_info
WHERE prd_cost != TRIM(prd_cost)

SELECT
cst_id,
COUNT(*)
FROM Raw_Layer.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*)>1 OR cst_id IS NULL

SELECT*FROM Raw_Layer.crm_cust_info
WHERE cst_id = 29449;


INSERT INTO Staging_Layer.crm_cust_info(
	cst_id,
	cst_key,
	cst_firstname,
	cst_lastdname,
	cst_material_status,
	cst_gndr, 
	cst_create_date)

SELECT
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastdname) AS cst_lastname,
CASE WHEN UPPER(TRIM(cst_material_status)) = 'S' THEN 'Single'
	 WHEN UPPER(TRIM(cst_material_status)) = 'M' THEN 'Married'
	 ELSE 'n/a'
END cst_material_status,
CASE WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
	 WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
	 ELSE 'n/a'
END cst_gndr,
cst_create_date
FROM(
	SELECT*,
	ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
	FROM Raw_Layer.crm_cust_info
)t WHERE flag_last = 1;


-- CHECK for unwanted spaces
SELECT cst_lastdname
FROM Staging_Layer.crm_cust_info
WHERE cst_lastdname != TRIM(cst_lastdname);
-- Data Standardize and Consistency
SELECT DISTINCT cst_gndr
FROM Staging_Layer.crm_cust_info


CREATE TABLE Staging_Layer.crm_cust_info(
	cst_id INT,
	cst_key NVARCHAR(50),
	cst_firstname NVARCHAR(50),
	cst_lastdname NVARCHAR(50),
	cst_material_status NVARCHAR(50),
	cst_gndr NVARCHAR(50),
	cst_create_date DATE,
	dwh_create_date DATETIME2 DEFAULT GETDATE()
);

CREATE TABLE Staging_Layer.crm_prd_info(
	prd_id INT,
	prd_key NVARCHAR(50),
	prd_nm NVARCHAR(50),
	prd_cost INT,
	prd_start_dt DATETIME,
	prd_end_dt DATETIME,
	dwh_create_date DATETIME2 DEFAULT GETDATE()
);

CREATE TABLE Staging_Layer.crm_sales_details(
	sls_ord_num NVARCHAR(50),
	sls_prd_key NVARCHAR(50),
	sls_cust_id INT,
	sls_order_dt INT,
	sls_ship_id INT,
	sls_due_dt INT,
	sls_sales INT,
	sls_quantity INT,
	sls_price INT,
	dwh_create_date DATETIME2 DEFAULT GETDATE()
);

CREATE TABLE Staging_Layer.erp_loc_a101(
	cid NVARCHAR(50),
	cntry NVARCHAR(50),
	dwh_create_date DATETIME2 DEFAULT GETDATE()
);

CREATE TABLE Staging_Layer.erp_cust_az12(
	cid NVARCHAR(50),
	bdate DATE,
	gen NVARCHAR(50),
	dwh_create_date DATETIME2 DEFAULT GETDATE()
);

CREATE TABLE Staging_Layer.erp_px_cat_g1v2(
	id NVARCHAR(50),
	cat NVARCHAR(50),
	subcat NVARCHAR(50),
	maintenance NVARCHAR(50),
	dwh_create_date DATETIME2 DEFAULT GETDATE()
);

BULK INSERT Staging_Layer.crm_cust_info
FROM 'C:\dwh\datasets\source_crm\cust_info.csv'
WITH (
	FIRSTROW = 2,
	FIELDTERMINATOR = ',',
	TABLOCK
);

DROP TABLE IF EXISTS Staging_Layer.crm_prd_info;

CREATE TABLE Staging_Layer.crm_prd_info( 
	prd_id INT,
	prd_key NVARCHAR(50),
	prd_nm NVARCHAR(100),
	prd_cost NVARCHAR(20),         -- was INT, now NVARCHAR to accept blanks if you have other method kindly drop i'm so nobe
	prd_line NVARCHAR(10),
	prd_start_dt DATETIME,     
	prd_end_dt DATETIME
);

BULK INSERT Staging_Layer.crm_prd_info
FROM 'C:\dwh\datasets\source_crm\prd_info.csv'
WITH (
	FIRSTROW = 2,
	FIELDTERMINATOR = ',',  
	ROWTERMINATOR = '\n',
	CODEPAGE = '65001',
	TABLOCK
);

BULK INSERT Staging_Layer.crm_sales_details
FROM 'C:\dwh\datasets\source_crm\sales_details.csv'
WITH (
    FIRSTROW = 2,
    FIELDTERMINATOR = ',',
    TABLOCK
);

BULK INSERT Staging_Layer.erp_loc_a101
FROM 'C:\dwh\datasets\source_erp\loc_a101.csv'
WITH (
    FIRSTROW = 2,
    FIELDTERMINATOR = ',',
    TABLOCK
);

BULK INSERT Staging_Layer.erp_cust_az12
FROM 'C:\dwh\datasets\source_erp\cust_az12.csv'
WITH (
    FIRSTROW = 2,
    FIELDTERMINATOR = ',',
    TABLOCK
);

BULK INSERT Staging_Layer.erp_px_cat_g1v2
FROM 'C:\dwh\datasets\source_erp\px_cat_g1v2.csv'
WITH (
    FIRSTROW = 2,
    FIELDTERMINATOR = ',',
    TABLOCK
);
